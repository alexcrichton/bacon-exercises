/**
* # Variants
* 
* ## `"utf8"`
* 
* ## `"utf16"`
* 
* ## `"compact-utf16"`
*/
export type StringEncoding = 'utf8' | 'utf16' | 'compact-utf16';
export type ProducersFields = [string, [string, string][]][];
export interface EmbedOpts {
  binary?: Uint8Array,
  witSource?: string,
  witPath?: string,
  stringEncoding?: StringEncoding,
  dummy?: boolean,
  world?: string,
  metadata?: ProducersFields,
}
export type ModuleMetaType = ModuleMetaTypeModule | ModuleMetaTypeComponent;
export interface ModuleMetaTypeModule {
  tag: 'module',
}
export interface ModuleMetaTypeComponent {
  tag: 'component',
  val: number,
}
export interface ModuleMetadata {
  name?: string,
  metaType: ModuleMetaType,
  range: [number, number],
  producers: ProducersFields,
}
import { WasiCliEnvironment1 } from './imports/wasi-cli-environment';
import { WasiCliExit1 } from './imports/wasi-cli-exit';
import { WasiCliStderr1 } from './imports/wasi-cli-stderr';
import { WasiCliStdin1 } from './imports/wasi-cli-stdin';
import { WasiCliStdout1 } from './imports/wasi-cli-stdout';
import { WasiCliTerminalInput1 } from './imports/wasi-cli-terminal-input';
import { WasiCliTerminalOutput1 } from './imports/wasi-cli-terminal-output';
import { WasiCliTerminalStderr1 } from './imports/wasi-cli-terminal-stderr';
import { WasiCliTerminalStdin1 } from './imports/wasi-cli-terminal-stdin';
import { WasiCliTerminalStdout1 } from './imports/wasi-cli-terminal-stdout';
import { WasiClocksWallClock1 } from './imports/wasi-clocks-wall-clock';
import { WasiFilesystemPreopens1 } from './imports/wasi-filesystem-preopens';
import { WasiFilesystemTypes1 } from './imports/wasi-filesystem-types';
import { WasiIoStreams1 } from './imports/wasi-io-streams';
import { WasiRandomRandom1 } from './imports/wasi-random-random';
export function parse(wat: string): Uint8Array;
export function print(binary: Uint8Array | ArrayBuffer): string;
export function componentNew(binary: Uint8Array | ArrayBuffer, adapters: [string, Uint8Array | ArrayBuffer][] | null): Uint8Array;
export function componentWit(binary: Uint8Array | ArrayBuffer): string;
export function componentEmbed(embedOpts: EmbedOpts): Uint8Array;
export function metadataShow(binary: Uint8Array | ArrayBuffer): ModuleMetadata[];
export function metadataAdd(binary: Uint8Array | ArrayBuffer, metadata: ProducersFields): Uint8Array;

export const $init: Promise<void>;
